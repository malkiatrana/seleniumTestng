/**
 * 
 */
package utility;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Arrays;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.comparator.NameFileComparator;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.testng.ITestContext;
import org.testng.TestListenerAdapter;

/**
 * @author Malkiat Singh
 *
 */


public class CopyFilestoDirectories extends TestListenerAdapter {
	ConfigReader config= new ConfigReader();
	String  HistoryFolderLocation, ResultFileName;



	@Override
	public void onStart(ITestContext context) {
		if(config.ChangeQA().contains("QA"))
		{			
			HistoryFolderLocation = context.getCurrentXmlTest().getParameter("HistoryFolderLocationQA");
			ResultFileName = context.getCurrentXmlTest().getParameter("ResultFileNameQA");
		}
		else {
			// TODO Auto-generated method stub
			HistoryFolderLocation = context.getCurrentXmlTest().getParameter("HistoryFolderLocation");
			ResultFileName = context.getCurrentXmlTest().getParameter("ResultFileName");
		}
	}
	
	@Override
	public void onFinish(ITestContext arg0) {		
		try
		{
			this.copyFile();	
			this.deleteOldHistory();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		} 
		catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
	}
	
	public void copyFile() throws IOException
	{
		Date date = new Date();  
	    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  
	    String strDate= formatter.format(date).toString();  
	    System.out.println(strDate);  
	    
	    File directory = new File(".\\test-output");
		File[] subdirs = directory.listFiles((FileFilter) DirectoryFileFilter.DIRECTORY);

		for (File dir : subdirs) {
			System.out.println("Directory: " + dir.getName());
			if(dir.getName().equals("html"))
			{	
				Files.createDirectories(Paths.get("C:\\AIW-Selenium-Reports"+HistoryFolderLocation+"\\History\\"+strDate));
				File destDir1 = new File("C:\\AIW-Selenium-Reports"+HistoryFolderLocation+"\\History\\"+strDate);
				File destDir2 = new File("C:\\AIW-Selenium-Reports"+HistoryFolderLocation+"\\html");
				
			
				FileUtils.copyDirectory(dir, destDir1);
				 File directory3 = new File("C:\\AIW-Selenium-Reports"+HistoryFolderLocation+"\\History\\"+strDate);
				File[] subdirsaftercopy=  directory3.listFiles((FileFilter) DirectoryFileFilter.DIRECTORY);
				
				for (File dircopy : subdirsaftercopy) {
				if(dircopy.getName().equals("Screenshots"))
				{	
					System.out.println("*********"+dircopy.getName());
					for (File f : dircopy.listFiles()) {
						long diff = new Date().getTime() - f.lastModified();

						if (diff > 1 * 24 * 60 * 60 * 1000) {
						    f.delete();
						}
					}
					
					
					
				}
			
				}
				
			    FileUtils.copyDirectory(dir, destDir2);			    
			  
			}
			
		}
		
		File source = new File(".\\Reports\\"+ResultFileName);
		File dest = new File("C:\\AIW-Selenium-Reports"+HistoryFolderLocation+"\\History\\"+strDate+"\\"+ResultFileName);
		
		FileUtils.copyFile(source, dest);
	}
	
	public void deleteOldHistory() throws ParseException, IOException {
		ConfigReader config;
		config= new ConfigReader();
		File directory = new File("C:\\AIW-Selenium-Reports\\"+HistoryFolderLocation+"\\History\\");
		File[] subdirs = directory.listFiles((FileFilter) DirectoryFileFilter.DIRECTORY);
		
		Arrays.sort(subdirs, NameFileComparator.NAME_REVERSE);
		
		for (File dir : subdirs) {
			String fileName = dir.getName();
			String destination = "C:\\AIW-Selenium-Reports\\"+HistoryFolderLocation+"\\History\\"+fileName;
			String[] arrFileName = fileName.split("-");			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");			
			Date startDate;
			String startDateString = arrFileName[2] + "/" + arrFileName[1] + "/" + arrFileName[0];
			String newDateString;
			
			startDate = df.parse(startDateString);
			newDateString = df.format(startDate);
			Date currentDate = new Date();
			
			long difference  = currentDate.getTime() - startDate.getTime();
			
			float daysBetween = (difference / (1000*60*60*24));
			System.out.println("no of days" + config.getNoOfDayscount());
			
			int historydays = Integer.parseInt(config.getNoOfDayscount());
			if(daysBetween >= historydays) 
			{
				// Then delete
				System.out.println("Folder will be deleted for destination: " + destination);
				
				FileUtils.deleteDirectory(new File(destination));
			}
			else
			{
				System.out.println("Folder will NOT be deleted for destination: " + destination);
			}
		}			
	}	
}
